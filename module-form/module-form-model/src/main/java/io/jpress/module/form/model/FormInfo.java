package io.jpress.module.form.model;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Sets;
import com.jfinal.kit.Ret;
import com.jfinal.plugin.activerecord.Record;
import io.jboot.db.annotation.Table;
import io.jboot.utils.ArrayUtil;
import io.jboot.utils.CollectionUtil;
import io.jboot.utils.StrUtil;
import io.jpress.commons.utils.UrlUtils;
import io.jpress.module.form.model.base.BaseFormInfo;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

/**
 * Generated by JPress.
 */
@Table(tableName = "form_info", primaryKey = "id")
public class FormInfo extends BaseFormInfo<FormInfo> {

    private static final long serialVersionUID = 1L;


    public static final String FORMINFO_STATUS_INIT = "init";
    public static final String FORMINFO_STATUS_PUBLISHED = "published";

    private static final Set<String> fieldTags = Sets.newHashSet("input", "textarea", "select"
            , "range", "radio", "checkbox", "date", "time", "datetime", "switch", "file-upload");


    public String getUrl(){
        return UrlUtils.getUrl("/form/",getId());
    }


    public String getActionUrl(){
        return UrlUtils.getUrl("/form/postData/",getId());
    }

    public List<FieldInfo> getFieldInfos() {
        String json = getBuilderJson();
        JSONArray datas = JSON.parseArray(json);
        List<FieldInfo> fieldInfos = new ArrayList<>();

        parseJsonArrayToDbFieldInfos(datas, fieldInfos);

        return fieldInfos;
    }


    public boolean isField(String fieldName) {
        List<FieldInfo> fieldInfos = getFieldInfos();
        for (FieldInfo fieldInfo : fieldInfos) {
            if (fieldName.equals(fieldInfo.getFieldName())) {
                return true;
            }
        }
        return false;
    }


    public Ret checkAllFields() {
        List<FieldInfo> fieldInfos = getFieldInfos();

        Set<String> errorLabels = new HashSet<>();
        for (FieldInfo dbFieldInfo : fieldInfos) {
            if (!dbFieldInfo.checkStateOk()) {
                errorLabels.add(dbFieldInfo.getLabel());
            }
        }

        if (errorLabels.isEmpty()) {
            return Ret.ok();
        } else {
            return Ret.fail().set("message", CollectionUtil.toString(errorLabels, ",") + "的字段名不能为空，或者不能为纯数字。");
        }
    }



    public String toCreateTableSql() {
        //CREATE TABLE `form_dict_item` (
        //  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
        //  `text` text COMMENT '文本内容',
        //  `value` varchar(64) DEFAULT NULL COMMENT 'key',
        //  PRIMARY KEY (`id`)
        //) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8mb4;


        StringBuilder sqlBuilder = new StringBuilder();
        sqlBuilder.append("CREATE TABLE `").append(getCurrentTableName()).append("` (");
        sqlBuilder.append("`id` int(11) unsigned NOT NULL AUTO_INCREMENT,");

        List<FieldInfo> fieldInfos = getFieldInfos();
        for (FieldInfo fieldInfo : fieldInfos) {
            sqlBuilder.append(fieldInfo.toFieldSql()).append(",");
        }

        sqlBuilder.append("PRIMARY KEY (`id`)");
        sqlBuilder.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;");

        return sqlBuilder.toString();
    }


    public Record parseRequestToRecord(HttpServletRequest request) {
        List<FieldInfo> fieldInfos = getFieldInfos();

        Record record = new Record();
        Map<String, String[]> parameters = request.getParameterMap();
        for (FieldInfo fieldInfo : fieldInfos) {
            String[] values = parameters.get(fieldInfo.getParaName());
            if (values != null && values.length > 0) {
                String string = ArrayUtil.toString(values, ",");
                if (StrUtil.isBlank(string)) {
                    continue;
                }

                //检查数据长度
                if (!fieldInfo.checkValueLen(string)) {
                    throw new IllegalArgumentException(fieldInfo.getLabel() + "的数据长度过长！");
                }

                Object value = null;
                try {
                    value = fieldInfo.convertValueData(string);
                } catch (Exception e) {
                    throw new IllegalArgumentException(e.getMessage(), e);
                }

                if (value != null) {
                    record.put(fieldInfo.getFieldName(), value);
                }
            }
        }

        return record;
    }



    public String getCurrentTableName() {
        return "form_data_" + getId() + "_" + getVersion();
    }


    public String getPrevTableName() {
        return "form_data_" + getId() + "_" + (getVersion() - 1);
    }


    private void parseJsonArrayToDbFieldInfos(JSONArray datas, List<FieldInfo> dbFieldInfos) {
        if (datas == null || datas.isEmpty()) {
            return;
        }

        for (int i = 0; i < datas.size(); i++) {
            JSONObject data = datas.getJSONObject(i);

            JSONObject children = data.getJSONObject("children");

            //容器（布局组件）
            if (children != null) {
                for (String s : children.keySet()) {
                    parseJsonArrayToDbFieldInfos(children.getJSONArray(s), dbFieldInfos);
                }
            }

            //非布局组件数据
            else if (fieldTags.contains(data.getString("tag"))) {

                String fieldName = data.getString("field");
                String fieldType = data.getString("field_type");
                Integer fieldLenth = data.getInteger("field_lenth");

                FieldInfo dbFieldInfo = new FieldInfo();
                dbFieldInfo.setParaName(data.getString("name"));
                dbFieldInfo.setShowInList(data.getBoolean("show_list"));
                dbFieldInfo.setWithSearch(data.getBoolean("with_search"));
                dbFieldInfo.setFieldName(fieldName);
                dbFieldInfo.setFieldType(fieldType);
                dbFieldInfo.setFieldTypeLen(fieldLenth);
                dbFieldInfo.setLabel(data.getString("label"));
                dbFieldInfo.setTag(data.getString("tag"));

                dbFieldInfos.add(dbFieldInfo);
            }
        }
    }



    public boolean isPublished() {
        return FORMINFO_STATUS_PUBLISHED.equals(getStatus());
    }
}

